type StudentWall = 
 service {
   addMyProfile: (StudentProfile) -> (Result);
   deleteMessage: (nat) -> (Result);
   deleteMyProfile: () -> (Result);
   downVote: (nat) -> (Result);
   getAllMessages: () -> (vec Message) query;
   getAllMessagesRanked: () -> (vec Message) query;
   getMessage: (nat) -> (Result_2) query;
   seeAProfile: (principal) -> (Result_1) query;
   upVote: (nat) -> (Result);
   updateMessage: (nat, Content) -> (Result);
   updateMyProfile: (StudentProfile) -> (Result);
   verifyWork: (principal, principal) -> (Result);
   writeMessage: (Content) -> (nat);
 };
type StudentProfile = 
 record {
   graduate: bool;
   name: text;
   team: text;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Message;
 };
type Result_1 = 
 variant {
   err: text;
   ok: StudentProfile;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Message = 
 record {
   content: Content;
   creator: principal;
   vote: int;
 };
type Content = 
 variant {
   Image: blob;
   Text: text;
   Video: blob;
 };
service : () -> StudentWall
